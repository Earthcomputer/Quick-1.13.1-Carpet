--- a/net/minecraft/world/WorldEntitySpawner.java
+++ b/net/minecraft/world/WorldEntitySpawner.java
@@ -20,6 +20,7 @@
 import net.minecraft.server.management.PlayerChunkMapEntry;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.FluidTags;
+import net.minecraft.util.Tuple;
 import net.minecraft.util.WeightedRandom;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.ChunkPos;
@@ -68,14 +69,43 @@
 
          int k4 = 0;
          BlockPos blockpos1 = worldServerIn.getSpawnPoint();
+         //CM start
+         int did = worldServerIn.dimension.getType().getId();
+         String level_suffix = (did==0)?"":((did<0?" (N)":" (E)"));
+         //CM end
 
          for(EnumCreatureType enumcreaturetype : EnumCreatureType.values()) {
+            //CM start
+            String type_code = String.format("%s", enumcreaturetype);
+            String group_code = type_code+level_suffix;
+            if (quickcarpet.SpawnReporter.track_spawns > 0L)
+            {
+                quickcarpet.SpawnReporter.overall_spawn_ticks.put(group_code, quickcarpet.SpawnReporter.overall_spawn_ticks.get(group_code) + quickcarpet.SpawnReporter.spawn_tries.get(type_code));
+            }
+            //CM end
             if ((!enumcreaturetype.getPeacefulCreature() || spawnPeacefulMobs) && (enumcreaturetype.getPeacefulCreature() || spawnHostileMobs) && (!enumcreaturetype.getAnimal() || spawnOnSetTickRate)) {
-               int l4 = enumcreaturetype.getMaxNumberOfCreature() * i / MOB_COUNT_DIV;
+               //CM replaced: //int l4 = enumcreaturetype.getMaxNumberOfCreature() * i / MOB_COUNT_DIV;
+               //with:
+               int l4 = (int)(Math.pow(2.0,(quickcarpet.SpawnReporter.mobcap_exponent/4)) * enumcreaturetype.getMaxNumberOfCreature() * i / MOB_COUNT_DIV);
                int i5 = worldServerIn.countEntities(enumcreaturetype.getBaseClass(), l4);
+               //CM start
+               quickcarpet.SpawnReporter.mobcaps.get(did).put(enumcreaturetype, new Tuple<>(k4, l4));
+               int tries = quickcarpet.SpawnReporter.spawn_tries.get(type_code);
+               if (quickcarpet.SpawnReporter.track_spawns > 0L)
+               {
+                   quickcarpet.SpawnReporter.spawn_attempts.put(group_code, quickcarpet.SpawnReporter.spawn_attempts.get(group_code) + tries);
+                   quickcarpet.SpawnReporter.spawn_cap_count.put(group_code, quickcarpet.SpawnReporter.spawn_cap_count.get(group_code) + k4);
+               }
+               if (quickcarpet.SpawnReporter.mock_spawns) { k4 = 0; } // no mobcaps
+               //CM end
                if (i5 <= l4) {
                   BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
+                  //CM start
+                  for (int trie = 0; trie < tries; trie++)
+                  {
+                  long local_spawns = 0;
+                  // CM end
                   label142:
                   for(ChunkPos chunkpos1 : this.eligibleChunksForSpawning) {
                      BlockPos blockpos = getRandomChunkPosition(worldServerIn, chunkpos1.x, chunkpos1.z);
@@ -130,7 +160,22 @@
                                           if (entityliving.isNotColliding(worldServerIn)) {
                                              ++j2;
                                              ++i4;
-                                             worldServerIn.spawnEntity(entityliving);
+                                             //CM replacing //worldServerIn.spawnEntity(entityliving);
+                                             ++local_spawns;
+                                             if (quickcarpet.SpawnReporter.track_spawns > 0L)
+                                             {
+                                                 String species = EntityType.getId(entityliving.getType()).toString();
+                                                 quickcarpet.SpawnReporter.registerSpawn(entityliving, type_code, species, blockpos$mutableblockpos);
+                                                 if (quickcarpet.SpawnReporter.mock_spawns)
+                                                 {
+                                                     entityliving.remove();
+                                                 }
+                                                 else
+                                                 {
+                                                     worldServerIn.spawnEntity(entityliving);
+                                                 }
+                                             }
+                                             //CM end
                                           } else {
                                              entityliving.remove();
                                           }
@@ -152,7 +197,27 @@
                         }
                      }
                   }
+                  if (quickcarpet.SpawnReporter.track_spawns > 0L)
+                  {
+                      if (local_spawns > 0)
+                      {
+                          quickcarpet.SpawnReporter.spawn_ticks_succ.put(group_code, quickcarpet.SpawnReporter.spawn_ticks_succ.get(group_code) + 1L);
+                          quickcarpet.SpawnReporter.spawn_ticks_spawns.put(group_code, quickcarpet.SpawnReporter.spawn_ticks_spawns.get(group_code) + local_spawns);
+                      }
+                      else
+                      {
+                          quickcarpet.SpawnReporter.spawn_ticks_fail.put(group_code, quickcarpet.SpawnReporter.spawn_ticks_fail.get(group_code) + 1L);
+                      }
+                  }
+                  } //CM: endfor
                }
+               else //CM full mobcap
+               {
+                   if (quickcarpet.SpawnReporter.track_spawns > 0L)
+                   {
+                       quickcarpet.SpawnReporter.spawn_ticks_full.put(group_code, quickcarpet.SpawnReporter.spawn_ticks_full.get(group_code) + quickcarpet.SpawnReporter.spawn_tries.get(type_code));
+                   }
+               }
             }
          }
 
